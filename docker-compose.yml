version: '3.8'

services:
  metric-harvester:
    build:
      context: ./metric_harvester
      dockerfile: Dockerfile
    container_name: metric-harvester
    ports:
      - "8081:8080"
    volumes:
      # Mount Docker socket to monitor containers from host
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      metric-harvester:
        condition: service_healthy

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  api-caller:
    build:
      context: ./api_caller
      dockerfile: Dockerfile
    container_name: api-caller-rootful
    ports:
      - "8082:8080"
    networks:
      - monitoring
    restart: unless-stopped
    environment:
      - PORT=8080

  api-caller-rootless:
    build:
      context: ./api_caller
      dockerfile: Dockerfile.rootless
    container_name: api-caller-rootless
    ports:
      - "8083:8080"
    networks:
      - monitoring
    restart: unless-stopped
    environment:
      - PORT=8080
    # Additional security constraints for rootless mode
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: false  # Set to true if the app doesn't need write access

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
